<script>
  document
    .querySelectorAll<HTMLElement>(".group")
    .forEach((card: HTMLElement) => {
      const cardElement: HTMLElement = card;
      const circle: HTMLElement = cardElement.querySelector(
        "#cursor-circle",
      ) as HTMLElement;

      let targetX: number = 0;
      let targetY: number = 0;
      let currentX: number = 0;
      let currentY: number = 0;
      let isHovering: boolean = false;
      let animationFrameId: number | null = null;

      cardElement.addEventListener("mouseenter", (e: MouseEvent) => {
        const rect: DOMRect = cardElement.getBoundingClientRect();
        targetX = e.clientX - rect.left;
        targetY = e.clientY - rect.top;
        currentX = targetX;
        currentY = targetY;
        circle.style.left = `${currentX}px`;
        circle.style.top = `${currentY}px`;
        circle.style.opacity = "1";
        isHovering = true;
        if (!animationFrameId) {
          animateCursor();
        }
      });

      cardElement.addEventListener("mousemove", (e: MouseEvent) => {
        const rect: DOMRect = cardElement.getBoundingClientRect();
        targetX = e.clientX - rect.left;
        targetY = e.clientY - rect.top;
      });

      cardElement.addEventListener("mouseleave", () => {
        isHovering = false;
        circle.style.opacity = "0";
        if (animationFrameId) {
          cancelAnimationFrame(animationFrameId);
          animationFrameId = null;
        }
      });

      function animateCursor(): void {
        if (!isHovering) return;
        const speed: number = 0.1;
        currentX += (targetX - currentX) * speed;
        currentY += (targetY - currentY) * speed;

        circle.style.left = `${currentX}px`;
        circle.style.top = `${currentY}px`;

        animationFrameId = requestAnimationFrame(animateCursor);
      }
    });
</script>

<div
  class="group relative flex flex-col md:flex-row odd:md:flex-row-reverse items-center justify-between gap-8 md:gap-12 mb-8 pb-8 border-dashed border-b border-b-secondary cursor-pointer"
>
  <div
    id="cursor-circle"
    class="absolute w-[75px] h-[75px] bg-primary border border-dashed border-secondary rounded-full pointer-events-none hidden group-hover:grid place-items-center transform -translate-x-1/2 -translate-y-1/2"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      class="w-10 h-10 text-accent"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <path d="M7 7h10v10"></path>
      <path d="M7 17 17 7"></path>
    </svg>
  </div>

  <div
    class="w-full md:max-w-[610px] aspect-[610/400] overflow-hidden border-dashed border-secondary rounded-3xl"
  >
    <img
      src="https://images.pexels.com/photos/30445480/pexels-photo-30445480.jpeg"
      alt="Project Screenshot"
      class="w-full h-full object-cover"
    />
  </div>

  <div class="space-y-4 text-center md:text-left">
    <h3 class="heading uppercase text-3xl md:text-6xl">Prompt smith</h3>
    <p class="text-lg md:text-2xl text-secondary max-w-xl mx-auto md:mx-0">
      I design robust, maintainable frontend systems with a focus on component
      reusability, performance optimization, and DX that developers wonâ€™t
      secretly hate.
    </p>
  </div>
</div>
